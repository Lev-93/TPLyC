package lyc.compiler;

import java_cup.runtime.*;

class Parser;


// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal AND;
terminal NOT;
terminal OR;
terminal OPEN_CORCHETE;
terminal CLOSE_CORCHETE;
terminal OPEN_LLAVE;
terminal CLOSE_LLAVE;
terminal PYC;
terminal COMA;
terminal MAYOROIGUAL;
terminal MAYOR;
terminal IGUAL;
terminal MENOR;
terminal MENOROIGUAL;
terminal IDENTIFIER;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal TIMER;
terminal FIRSTINDEXOF;
terminal WRITE;
terminal READ;
terminal INIT;

terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;

// Non Terminals
non terminal principio;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal declaracion;
non terminal seleccion;
non terminal iteracion;
non terminal variableIniciada;
non terminal firstindexof;
non terminal timer;
non terminal read;
non terminal write;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal lista;

// Start Symbol Definition
start with principio;
principio ::= programa; //dejar hasta que armemos bien el test
principio ::= INIT OPEN_LLAVE declaracion CLOSE_LLAVE programa {: System.out.println("Programa"); :};
declaracion ::= declaracion variableIniciada {: System.out.println("Declaracion de variable"); :};
declaracion ::= variableIniciada {: System.out.println("Declaracion de variable"); :};
variableIniciada ::= INT IDENTIFIER {: System.out.println("Entero"); :};
variableIniciada ::= STRING IDENTIFIER {: System.out.println("Cadena"); :};
variableIniciada ::= FLOAT IDENTIFIER {: System.out.println("Flotante"); :};
programa ::= programa sentence {: System.out.println("Programa"); :};
programa ::= sentence {: System.out.println("Sentencia"); :};
sentence ::= iteracion {: System.out.println("Sentencia"); :};
sentence ::= seleccion {: System.out.println("Sentencia"); :};
sentence ::= assignment {: System.out.println("End"); :};
sentence ::= firstindexof{: System.out.println("FirstIndexOf"); :};
sentence ::= timer {: System.out.println("Timer"); :};
sentence ::= read{: System.out.println("Read"); :};
iteracion ::= WHILE condicion OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("iteracion"); :};
seleccion ::= IF condicion  OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("Seleccion simple"); :};
seleccion ::= IF condicion OPEN_LLAVE programa CLOSE_LLAVE ELSE OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("Seleccion con else"); :};
condicion ::= comparacion {: System.out.println("Condicion"); :};
condicion ::= condicion OR comparacion {: System.out.println("OR"); :};
condicion ::= condicion AND comparacion {: System.out.println("AND"); :};
comparacion ::= expression comparador expression {: System.out.println("Comparacion"); :};
comparador ::= MAYOROIGUAL {: System.out.println(">="); :};
comparador ::= MAYOR {: System.out.println(">"); :};
comparador ::= IGUAL {: System.out.println("="); :};
comparador ::= MENOROIGUAL {: System.out.println("<="); :};
comparador ::= MENOR {: System.out.println("<"); :};
assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Assignment"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); :};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
read ::= READ OPEN_BRACKET IDENTIFIER:id  CLOSE_BRACKET {: System.out.println("read(base) *-base es una variable-*");:};
write ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET{: System.out.println(" *- var1 es una variable numÃ©rica definida previamente -*");:};
write ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET{: System.out.println( "Write(STRING) Constant: " + constant ); :};
timer ::= TIMER OPEN_BRACKET INTEGER_CONSTANT:constant COMA write CLOSE_BRACKET{: System.out.println("Timer: " + constant); :};
firstindexof ::= FIRSTINDEXOF OPEN_BRACKET IDENTIFIER:id PYC OPEN_CORCHETE lista CLOSE_CORCHETE CLOSE_BRACKET {: System.out.println("FirstIndexOf: Elemento a buscar" + id );:};
lista ::= lista COMA factor{: System.out.println("Elemento Lista" ); :};
lista ::= factor {: System.out.println("Ultimo elemento lista"); :};
