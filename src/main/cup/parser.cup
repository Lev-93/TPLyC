package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.Simbolo;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.IntermediateCodeGenerator;
import lyc.compiler.files.Terceto;
import lyc.compiler.files.Punteros;

class Parser;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal AND;
terminal NOT;
terminal OR;
terminal OPEN_CORCHETE;
terminal CLOSE_CORCHETE;
terminal OPEN_LLAVE;
terminal CLOSE_LLAVE;
terminal PYC;
terminal COMA;
terminal MAYOROIGUAL;
terminal MAYOR;
terminal IGUAL;
terminal MENOR;
terminal MENOROIGUAL;
terminal IDENTIFIER;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal TIMER;
terminal FIRSTINDEXOF;
terminal WRITE;
terminal READ;
terminal INIT;

terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;

// Non Terminals
non terminal principio;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal declaracion;
non terminal seleccion;
non terminal iteracion;
non terminal variableIniciada;
non terminal firstindexof;
non terminal timer;
non terminal read;
non terminal write;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal lista;
non terminal elemento;
non terminal listaFlotante;
non terminal listaCadena;
non terminal listaEnteros;

// Start Symbol Definition
start with principio;

principio ::= INIT OPEN_LLAVE declaracion CLOSE_LLAVE programa {: System.out.println("Programa"); :};

declaracion ::= declaracion variableIniciada {: System.out.println("Declaracion de variable"); :};
declaracion ::= variableIniciada {: System.out.println("Declaracion de variable"); :};

variableIniciada ::= INT listaEnteros {: System.out.println("Entero");:};
variableIniciada ::= STRING listaCadena {: System.out.println("Cadena");:};
variableIniciada ::= FLOAT listaFlotante {: System.out.println("Flotante"); :};

listaEnteros ::= listaEnteros COMA IDENTIFIER:id {: System.out.println("Variable Entera: " + id ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"int","",""));:};
listaEnteros ::= IDENTIFIER:id  {: System.out.println("Variable Entera: " + id); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"int","",""));:};

listaFlotante ::= listaFlotante COMA IDENTIFIER:id {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"float","","")); :};
listaFlotante ::= IDENTIFIER:id  {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"float","","")); :};

listaCadena ::= listaCadena COMA IDENTIFIER:id {: System.out.println("Cadena:" + id );new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"string","","")); :};
listaCadena ::= IDENTIFIER:id  {: System.out.println("Cadena:" + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"string","","")); :};

programa ::= programa sentence {: System.out.println("Programa Sentencia"); :};
programa ::= sentence {: System.out.println("Sentencia");:};

sentence ::= iteracion {:System.out.println("Sentencia");:};
sentence ::= seleccion {:System.out.println("Sentencia"); :};
sentence ::= assignment {:System.out.println("Sentencia");  :};
sentence ::= firstindexof{: System.out.println("Sentencia"); :};
sentence ::= timer {: System.out.println("Sentencia"); :};
sentence ::= read{: System.out.println("Sentencia"); :};
sentence ::= write{:System.out.println("Sentencia"); :};

iteracion ::= WHILE OPEN_BRACKET condicion CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("iteracion"); :};

seleccion ::= IF OPEN_BRACKET condicion CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("Seleccion simple"); :};
seleccion ::= IF OPEN_BRACKET condicion CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE ELSE OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("Seleccion con else"); :};

condicion ::= comparacion {: System.out.println("Condicion"); :};
condicion ::= NOT comparacion {: System.out.println("Condicion negada"); :};
condicion ::= condicion OR comparacion {: System.out.println("OR"); :};
condicion ::= condicion AND comparacion {: System.out.println("AND"); :};

comparacion ::= expression comparador {: Terceto Aux = new Terceto("CMP",""+(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceExpresion())),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getPila().push(Aux.getNroTerceto());:}  expression {: System.out.println("Comparacion"); :};

comparador ::= MAYOROIGUAL {: System.out.println(">=");Terceto Aux = new Terceto(">=","","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getP().setIndiceComparador(Aux.getNroTerceto()); :};
comparador ::= MAYOR {: System.out.println(">");Terceto Aux = new Terceto(">","","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getP().setIndiceComparador(Aux.getNroTerceto()); :};
comparador ::= IGUAL {: System.out.println("=");Terceto Aux = new Terceto("=","","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getP().setIndiceComparador(Aux.getNroTerceto()); :};
comparador ::= MENOROIGUAL {: System.out.println("<=");Terceto Aux = new Terceto("<=","","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getP().setIndiceComparador(Aux.getNroTerceto()); :};
comparador ::= MENOR {: System.out.println("<");Terceto Aux = new Terceto("<","","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getP().setIndiceComparador(Aux.getNroTerceto()); :};

assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Asignacion"); :};

expression ::= expression PLUS term {: System.out.println("+"); Terceto Aux = new Terceto("+",""+(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceExpresion())), ""+(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceTermino()))); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new IntermediateCodeGenerator().getP().setIndiceExpresion(Aux.getNroTerceto()); :};
expression ::= expression SUB term {: System.out.println("-"); Terceto Aux = new Terceto("-",""+(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceExpresion())), ""+(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceTermino()))); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new IntermediateCodeGenerator().getP().setIndiceExpresion(Aux.getNroTerceto()); :};
expression ::= term {: System.out.println("Expression = Term"); new IntermediateCodeGenerator().getP().setIndiceExpresion(new IntermediateCodeGenerator().getP().getIndiceTermino()); :};

term ::= term MULT factor {: System.out.println("*"); Terceto Aux = new Terceto("*",""+(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceTermino())),""+ (new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceFactor()))); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new IntermediateCodeGenerator().getP().setIndiceTermino(Aux.getNroTerceto()); :};
term ::= term DIV factor {: System.out.println("/"); Terceto Aux = new Terceto("/",""+(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceTermino())),""+ (new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getP().getIndiceFactor()))); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new IntermediateCodeGenerator().getP().setIndiceTermino(Aux.getNroTerceto()); :};
term ::= factor {: System.out.println("Term = factor"); new IntermediateCodeGenerator().getP().setIndiceTermino(new IntermediateCodeGenerator().getP().getIndiceFactor()); :};

factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id);Terceto Aux= new Terceto(""+id,"",""); new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getP().setIndiceFactor(Aux.getNroTerceto());:};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),""));Terceto Aux = new Terceto("_"+constant.toString(),"","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);:};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_FLOAT",constant.toString(),""));Terceto Aux = new Terceto("_"+constant.toString(),"","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new IntermediateCodeGenerator().getP().setIndiceFactor(Aux.getNroTerceto());:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};

read ::= READ OPEN_BRACKET IDENTIFIER:id  CLOSE_BRACKET {: System.out.println("read(base) *-base es una variable-*");Terceto Aux = new Terceto("READ",id.toString(),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux);:};

write ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET{: System.out.println(" *- var1 es una variable numÃ©rica definida previamente -*");new IntermediateCodeGenerator().getListaTercetos().add(new Terceto("WRITE",""+id,""));:};
write ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET{: System.out.println( "Write(STRING) Constant: " + constant );  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_STRING",constant.toString(),constant.toString()));new IntermediateCodeGenerator().getListaTercetos().add(new Terceto("WRITE",""+constant.toString(),""));:};

timer ::= TIMER OPEN_BRACKET INTEGER_CONSTANT:constant COMA write CLOSE_BRACKET{: System.out.println("Timer: " + constant);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),"")); :};
//COMO LE HAGO A TIMER

firstindexof ::= FIRSTINDEXOF OPEN_BRACKET IDENTIFIER:id PYC OPEN_CORCHETE{:Terceto Aux = new Terceto("=","@aux",id.toString());new IntermediateCodeGenerator().getListaTercetos().add(Aux);:} lista CLOSE_CORCHETE CLOSE_BRACKET {: System.out.println("FirstIndexOf: Elemento a buscar" + id + "[Lista]");:};

lista::= lista COMA elemento{: System.out.println("Lista , elemento");Terceto Aux = new Terceto("CMP","@aux",""+(new IntermediateCodeGenerator().getP().getIndiceElemento()));new IntermediateCodeGenerator().getListaTercetos().add(Aux);Terceto Aux2 = new Terceto("BNE",""+(Aux.getNroTerceto()+3),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux2);new IntermediateCodeGenerator().getPila().push(Aux2.getNroTerceto()); :};
lista::= elemento{: System.out.println("Elemento"); Terceto Aux = new Terceto("CMP","@aux",""+(new IntermediateCodeGenerator().getP().getIndiceElemento()));new IntermediateCodeGenerator().getListaTercetos().add(Aux);Terceto Aux2 = new Terceto("BNE",""+(Aux.getNroTerceto()+3),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux2);new IntermediateCodeGenerator().getPila().push(Aux.getNroTerceto());:};

elemento::=IDENTIFIER:id{: System.out.println("Identificador: " + id);new IntermediateCodeGenerator().getListaTercetos().add(new Terceto(id.toString(),"","")); Terceto A = new Terceto(id.toString(),"","") ;new IntermediateCodeGenerator().getListaTercetos().add(A); new IntermediateCodeGenerator().getP().setIndiceElemento(A.getNroTerceto());:};
elemento::=INTEGER_CONSTANT:constant{: System.out.println("Entero: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),""));new IntermediateCodeGenerator().getListaTercetos().add(new Terceto("_"+constant.toString(),"",""));Terceto A = new Terceto("_"+constant.toString(),"","") ;new IntermediateCodeGenerator().getListaTercetos().add(A); new IntermediateCodeGenerator().getP().setIndiceElemento(A.getNroTerceto());:};
elemento::=FLOAT_CONSTANT:constant{: System.out.println("Flotante: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_FLOAT",constant.toString(),""));new IntermediateCodeGenerator().getListaTercetos().add(new Terceto("_"+constant.toString(),"",""));Terceto A = new Terceto("_"+constant.toString(),"","") ;new IntermediateCodeGenerator().getListaTercetos().add(A); new IntermediateCodeGenerator().getP().setIndiceElemento(A.getNroTerceto());:};
elemento::=STRING_CONSTANT:constant{: System.out.println("Cadena: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_STRING",constant.toString(),constant.toString()));Terceto Aux = new Terceto("_"+constant.toString(),"","") ;new IntermediateCodeGenerator().getListaTercetos().add(Aux); new IntermediateCodeGenerator().getP().setIndiceElemento(Aux.getNroTerceto());:};
