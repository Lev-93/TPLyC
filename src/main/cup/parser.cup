package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.Simbolo;
import lyc.compiler.files.SymbolTableGenerator;
import lyc.compiler.files.IntermediateCodeGenerator;
import lyc.compiler.files.Terceto;
import lyc.compiler.files.Punteros;

class Parser;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal AND;
terminal NOT;
terminal OR;
terminal OPEN_CORCHETE;
terminal CLOSE_CORCHETE;
terminal OPEN_LLAVE;
terminal CLOSE_LLAVE;
terminal PYC;
terminal COMA;
terminal MAYOROIGUAL;
terminal MAYOR;
terminal IGUAL;
terminal MENOR;
terminal MENOROIGUAL;
terminal IDENTIFIER;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal TIMER;
terminal FIRSTINDEXOF;
terminal WRITE;
terminal READ;
terminal INIT;

terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;

// Non Terminals
non terminal principio;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal declaracion;
non terminal seleccion;
non terminal iteracion;
non terminal variableIniciada;
non terminal firstindexof;
non terminal timer;
non terminal read;
non terminal write;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal lista;
non terminal elemento;
non terminal listaFlotante;
non terminal listaCadena;
non terminal listaEnteros;
non terminal if;

// Start Symbol Definition
start with principio;

principio ::= INIT OPEN_LLAVE declaracion CLOSE_LLAVE programa {: System.out.println("Programa");:};

declaracion ::= declaracion variableIniciada {: System.out.println("Declaracion de variable"); :};
declaracion ::= variableIniciada {: System.out.println("Declaracion de variable"); :};

variableIniciada ::= INT listaEnteros {: System.out.println("Entero");:};
variableIniciada ::= STRING listaCadena {: System.out.println("Cadena");:};
variableIniciada ::= FLOAT listaFlotante {: System.out.println("Flotante"); :};

listaEnteros ::= listaEnteros COMA IDENTIFIER:id {: System.out.println("Variable Entera: " + id ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"int","?",""));:};
listaEnteros ::= IDENTIFIER:id  {: System.out.println("Variable Entera: " + id); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"int","?",""));:};

listaFlotante ::= listaFlotante COMA IDENTIFIER:id {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"float","?","")); :};
listaFlotante ::= IDENTIFIER:id  {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"float","?","")); :};

listaCadena ::= listaCadena COMA IDENTIFIER:id {: System.out.println("Cadena:" + id );new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"string","?","")); :};
listaCadena ::= IDENTIFIER:id  {: System.out.println("Cadena:" + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"string","?","")); :};

programa ::= programa sentence {: System.out.println("Programa Sentencia");new Punteros().setIndicePrograma(new Punteros().getIndiceSentencia()); :};
programa ::= sentence {: System.out.println("Sentencia");new Punteros().setIndicePrograma(new Punteros().getIndiceSentencia()); new Punteros().setAuxiliarThen(new Punteros().getIndiceSentencia()-1);:};

sentence ::= iteracion {:System.out.println("Sentencia");new Punteros().setIndiceSentencia(new Punteros().getIndiceIteracion());:};
sentence ::= seleccion {:System.out.println("Sentencia"); new Punteros().setIndiceSentencia(new Punteros().getIndiceSeleccion());:};
sentence ::= assignment {:System.out.println("Sentencia");  new Punteros().setIndiceSentencia(new Punteros().getIndiceAsignacion());:};
sentence ::= firstindexof{: System.out.println("Sentencia"); new Punteros().setIndiceSentencia(new Punteros().getIndiceFirstIndex());:};
sentence ::= timer {: System.out.println("Sentencia"); new Punteros().setIndiceSentencia(new Punteros().getIndiceTimer());:};
sentence ::= read{: System.out.println("Sentencia"); new Punteros().setIndiceSentencia(new Punteros().getIndiceRead());:};
sentence ::= write{:System.out.println("Sentencia"); new Punteros().setIndiceSentencia(new Punteros().getIndiceWrite());:};

iteracion ::= WHILE OPEN_BRACKET  condicion {:new Punteros().setAuxiliarWhile(new Punteros().getIndicePrograma());:} CLOSE_BRACKET OPEN_LLAVE {:new Punteros().setIndiceThen(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getListaTercetos().size()-1).getNroTerceto()+1);:}  programa  CLOSE_LLAVE {: System.out.println("iteracion");new IntermediateCodeGenerator().modificarTerceto(new Punteros().getIndiceCondicion(),"" + (new Punteros().getIndicePrograma()+1+1),2);new Punteros().setIndiceSeleccion(new Punteros().getIndiceCondicion());if(new Punteros().getAuxiliarAnd()!=0){new IntermediateCodeGenerator().modificarTerceto(new Punteros().getAuxiliarAnd(),"" + (new Punteros().getIndicePrograma()+1+1),2);;new Punteros().setAuxiliarAnd(0);System.out.println("");}if(new Punteros().getAuxiliarOr()!=0){new IntermediateCodeGenerator().modificarTerceto((new Punteros().getAuxiliarOr()),"" + (new Punteros().getIndiceThen()),2);;new Punteros().setAuxiliarOr(0);System.out.println("");}Terceto Aux = new Terceto("JMP","" + new Punteros().getAuxiliarWhile(),""); new IntermediateCodeGenerator().getListaTercetos().add(Aux); :};

if ::=IF OPEN_BRACKET condicion CLOSE_BRACKET OPEN_LLAVE {:new Punteros().setIndiceThen(new IntermediateCodeGenerator().getListaTercetos().get(new IntermediateCodeGenerator().getListaTercetos().size()-1).getNroTerceto()+1);:} programa  CLOSE_LLAVE;
seleccion ::=  if {: System.out.println("Seleccion simple");new IntermediateCodeGenerator().modificarTerceto(new Punteros().getIndiceCondicion(),"" + (new Punteros().getIndicePrograma()+1),2);  new Punteros().setIndiceSeleccion(new Punteros().getIndicePrograma()+1);if(new Punteros().getAuxiliarAnd()!=0){new IntermediateCodeGenerator().modificarTerceto(new Punteros().getAuxiliarAnd(),"" + (new Punteros().getIndicePrograma()+1),2);new Punteros().setAuxiliarAnd(0);System.out.println("");}if(new Punteros().getAuxiliarOr()!=0){new IntermediateCodeGenerator().modificarTerceto((new Punteros().getAuxiliarOr()),"" + (new Punteros().getIndiceThen()),2);;new Punteros().setAuxiliarOr(0);System.out.println("");}:};
seleccion ::= if ELSE {:new Punteros().setIndiceThen(new Punteros().getAuxiliarThen());Terceto Aux = new Terceto("JMP","","");new Punteros().setIndiceElse(Aux.getNroTerceto()-1);new IntermediateCodeGenerator().getListaTercetos().add(Aux);:} OPEN_LLAVE programa CLOSE_LLAVE  {: System.out.println("Seleccion con else");new IntermediateCodeGenerator().modificarTerceto(new Punteros().getIndiceElse(),"" + (new Punteros().getIndicePrograma()+1),2);new Punteros().setIndiceSeleccion(new Punteros().getIndicePrograma()+1);new IntermediateCodeGenerator().modificarTerceto(new Punteros().getIndiceCondicion(),"" + (new Punteros().getIndiceElse()+2),2);new Punteros().setIndiceSeleccion(new Punteros().getIndicePrograma()+1);if(new Punteros().getAuxiliarAnd()!=0){new IntermediateCodeGenerator().modificarTerceto(new Punteros().getAuxiliarAnd(),"" + (new Punteros().getIndicePrograma()+1),2);new Punteros().setAuxiliarAnd(0);System.out.println("");}if(new Punteros().getAuxiliarOr()!=0){new IntermediateCodeGenerator().modificarTerceto((new Punteros().getAuxiliarOr()),"" + (new Punteros().getIndiceThen()),2);;new Punteros().setAuxiliarOr(0);System.out.println("");}:};


condicion ::= NOT comparacion {: System.out.println("Condicion negada");Terceto Aux = new Terceto(""+new IntermediateCodeGenerator().getPila().pop(),"","");new IntermediateCodeGenerator().invertirSalto(Aux);new Punteros().setIndiceCondicion(Aux.getNroTerceto()-1);new IntermediateCodeGenerator().getListaTercetos().add(Aux); :};//Invertir Condicion de salto
condicion ::= condicion OR{:new Punteros().setAuxiliarOr(new Punteros().getIndiceCondicion());:} comparacion      {: System.out.println("OR") ; Terceto Aux = new Terceto(""+new IntermediateCodeGenerator().getPila().pop(),"","");new Punteros().setIndiceCondicion(Aux.getNroTerceto()-1);new IntermediateCodeGenerator().getListaTercetos().add(Aux);int orInd=new Punteros().getAuxiliarOr();Terceto muleto=new IntermediateCodeGenerator().getListaTercetos().get(orInd);String salto=new IntermediateCodeGenerator().invertirSalto(muleto); new IntermediateCodeGenerator().modificarTerceto(orInd,salto,1); :};//Invertir Condicion de salto solo 1 parentesis al then
condicion ::= condicion AND{:new Punteros().setAuxiliarAnd(new Punteros().getIndiceComparacion());:}  comparacion {: System.out.println("AND"); Terceto Aux = new Terceto(""+new IntermediateCodeGenerator().getPila().pop(),"","");new Punteros().setIndiceCondicion(Aux.getNroTerceto()-1);new IntermediateCodeGenerator().getListaTercetos().add(Aux);:};
condicion ::= comparacion {: System.out.println("Condicion"); Terceto Aux = new Terceto(""+new IntermediateCodeGenerator().getPila().pop(),"","");new Punteros().setIndiceCondicion(Aux.getNroTerceto()-1);new IntermediateCodeGenerator().getListaTercetos().add(Aux);:};

comparacion ::= expression comparador {: new Punteros().setAuxiliar1((new Punteros().getIndiceExpresion())); :} expression {: System.out.println("Comparacion");Terceto Aux = new Terceto("CMP",""+(new Punteros().getAuxiliar1()),""+(new Punteros().getIndiceExpresion()));new Punteros().setIndiceComparacion(Aux.getNroTerceto());new IntermediateCodeGenerator().getListaTercetos().add(Aux);:};

comparador ::= MAYOROIGUAL {: System.out.println(">=");new IntermediateCodeGenerator().getPila().push("JB");; :};
comparador ::= MAYOR {: System.out.println(">");new IntermediateCodeGenerator().getPila().push("JBE"); :};
comparador ::= IGUAL {: System.out.println("==");new IntermediateCodeGenerator().getPila().push("JNE"); :};
comparador ::= MENOROIGUAL {: System.out.println("<=");new IntermediateCodeGenerator().getPila().push("JA"); :};
comparador ::= MENOR {: System.out.println("<");new IntermediateCodeGenerator().getPila().push("JAE"); :};

assignment ::= IDENTIFIER:id ASSIG expression {: System.out.println("Asignacion"); Terceto Aux = new Terceto("=",id.toString(),""+(new Punteros().getIndiceExpresion()));new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceAsignacion(Aux.getNroTerceto());:};

expression ::= expression PLUS term {: System.out.println("+"); Terceto Aux = new Terceto("+",""+(new Punteros().getIndiceExpresion()), ""+(new Punteros().getIndiceTermino())); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new Punteros().setIndiceExpresion(Aux.getNroTerceto()); :};
expression ::= expression SUB term {: System.out.println("-"); Terceto Aux = new Terceto("-",""+(new Punteros().getIndiceExpresion()), ""+(new Punteros().getIndiceTermino())); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new Punteros().setIndiceExpresion(Aux.getNroTerceto()); :};
expression ::= term {: System.out.println("Expression = Term"); new Punteros().setIndiceExpresion((new Punteros().getIndiceTermino())); :};

term ::= term MULT factor {: System.out.println("*"); Terceto Aux = new Terceto("*",""+(new Punteros().getIndiceTermino()),""+ (new Punteros().getIndiceFactor())); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new Punteros().setIndiceTermino(Aux.getNroTerceto()); :};
term ::= term DIV factor {: System.out.println("/"); Terceto Aux = new Terceto("/",""+(new Punteros().getIndiceTermino()),""+ (new Punteros().getIndiceFactor())); new IntermediateCodeGenerator().getListaTercetos().add(Aux); new Punteros().setIndiceTermino(Aux.getNroTerceto()); :};
term ::= factor {: System.out.println("Term = factor"); new Punteros().setIndiceTermino((new Punteros().getIndiceFactor())); :};


factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id);Terceto fAux= new Terceto(id.toString(),"",""); new IntermediateCodeGenerator().getListaTercetos().add(fAux);new Punteros().setIndiceFactor(fAux.getNroTerceto());:};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),""));Terceto Aux = new Terceto("_"+constant.toString(),"","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceFactor(Aux.getNroTerceto());:};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_FLOAT",constant.toString(),""));Terceto Aux = new Terceto("_"+constant.toString(),"","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceFactor(Aux.getNroTerceto());:};

factor ::= OPEN_BRACKET {:new Punteros().setAuxiliar1((new Punteros().getIndiceTermino()));new Punteros().setAuxiliar2((new Punteros().getIndiceExpresion()));:} expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); new Punteros().setIndiceFactor((new Punteros().getIndiceExpresion()));new Punteros().setIndiceTermino((new Punteros().getAuxiliar1()));new Punteros().setIndiceExpresion((new Punteros().getAuxiliar2())); :};


read ::= READ OPEN_BRACKET IDENTIFIER:id  CLOSE_BRACKET {: System.out.println("read(base) *-base es una variable-*");Terceto Aux = new Terceto("=",id.toString(),"READ");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceRead(Aux.getNroTerceto());:};

write ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET{: System.out.println(" *- var1 es una variable numérica definida previamente -*");Terceto Aux= new Terceto("WRITE","_"+id.toString(),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceWrite(Aux.getNroTerceto());:};
write ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET{: System.out.println( "Write(STRING) Constant: " + constant );  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(constant.toString(),"CTE_STRING",constant.toString(),constant.toString()));Terceto Aux= new Terceto("WRITE",""+constant.toString(),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceWrite(Aux.getNroTerceto());:};

timer ::= TIMER OPEN_BRACKET INTEGER_CONSTANT:constant COMA write CLOSE_BRACKET{:int i = Integer.parseInt(constant.toString()); while (i>1){i-=1;System.out.println("Timer: " + constant);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),"")); Terceto Aux = new Terceto("TIMER","_"+constant.toString(),""+(new Punteros().getIndiceWrite()));new IntermediateCodeGenerator().getListaTercetos().add(Aux);}:};


firstindexof ::= FIRSTINDEXOF OPEN_BRACKET IDENTIFIER:id PYC OPEN_CORCHETE{:Terceto Aux = new Terceto("=","@aux",id.toString());new IntermediateCodeGenerator().getListaTercetos().add(Aux);:} lista CLOSE_CORCHETE CLOSE_BRACKET {: System.out.println("FirstIndexOf: Elemento a buscar" + id + "[Lista]");Terceto Aux = new Terceto("WRITE","@aux2","");new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setAuxiliarFirstIndex(0);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("@aux","int","?",""));new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("@aux2","int","?",""));:};

lista::= lista COMA elemento{: System.out.println("Lista , elemento");Terceto Aux = new Terceto("CMP","@aux",""+(new Punteros().getIndiceElemento()));new IntermediateCodeGenerator().getListaTercetos().add(Aux);Terceto Aux2 = new Terceto("JNE",""+(Aux.getNroTerceto()+3),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux2);new Punteros().setAuxiliarFirstIndex(new Punteros().getAuxiliarFirstIndex()+1);Terceto Aux3 = new Terceto("=","@aux2",""+new Punteros().getAuxiliarFirstIndex());new IntermediateCodeGenerator().getListaTercetos().add(Aux3); :};
lista::= elemento{: System.out.println("Elemento"); Terceto Aux = new Terceto("CMP","@aux",""+(new Punteros().getIndiceElemento()));new IntermediateCodeGenerator().getListaTercetos().add(Aux);Terceto Aux2 = new Terceto("JNE",""+(Aux.getNroTerceto()+3),"");new IntermediateCodeGenerator().getListaTercetos().add(Aux2);new Punteros().setAuxiliarFirstIndex(new Punteros().getAuxiliarFirstIndex()+1);Terceto Aux3 = new Terceto("=","@aux2",""+new Punteros().getAuxiliarFirstIndex());new IntermediateCodeGenerator().getListaTercetos().add(Aux3);:};


elemento::=IDENTIFIER:id{: System.out.println("Identificador: " + id);new IntermediateCodeGenerator().getListaTercetos().add(new Terceto(id.toString(),"","")); Terceto Aux = new Terceto(id.toString(),"","") ;new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceElemento(Aux.getNroTerceto());:};
elemento::=INTEGER_CONSTANT:constant{: System.out.println("Entero: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),""));Terceto Aux = new Terceto("_"+constant.toString(),"","") ;new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceElemento(Aux.getNroTerceto());:};
elemento::=FLOAT_CONSTANT:constant{: System.out.println("Flotante: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_FLOAT",constant.toString(),""));Terceto Aux = new Terceto("_"+constant.toString(),"","") ;new IntermediateCodeGenerator().getListaTercetos().add(Aux);new Punteros().setIndiceElemento(Aux.getNroTerceto());:};
