package lyc.compiler;

import java_cup.runtime.*;
import lyc.compiler.files.Simbolo;
import lyc.compiler.files.SymbolTableGenerator;

class Parser;

// Terminals
terminal ASSIG;
terminal PLUS;
terminal SUB;
terminal MULT;
terminal DIV;
terminal OPEN_BRACKET;
terminal CLOSE_BRACKET;
terminal AND;
terminal NOT;
terminal OR;
terminal OPEN_CORCHETE;
terminal CLOSE_CORCHETE;
terminal OPEN_LLAVE;
terminal CLOSE_LLAVE;
terminal PYC;
terminal COMA;
terminal MAYOROIGUAL;
terminal MAYOR;
terminal IGUAL;
terminal MENOR;
terminal MENOROIGUAL;
terminal IDENTIFIER;

terminal IF;
terminal ELSE;
terminal WHILE;
terminal FLOAT;
terminal INT;
terminal STRING;
terminal TIMER;
terminal FIRSTINDEXOF;
terminal WRITE;
terminal READ;
terminal INIT;

terminal INTEGER_CONSTANT;
terminal STRING_CONSTANT;
terminal FLOAT_CONSTANT;

// Non Terminals
non terminal principio;
non terminal sentence;
non terminal assignment;
non terminal expression;
non terminal term;
non terminal factor;
non terminal programa;
non terminal declaracion;
non terminal seleccion;
non terminal iteracion;
non terminal variableIniciada;
non terminal firstindexof;
non terminal timer;
non terminal read;
non terminal write;
non terminal condicion;
non terminal comparacion;
non terminal comparador;
non terminal lista;
non terminal elemento;
non terminal listaFlotante;
non terminal listaCadena;
non terminal listaEnteros;

// Start Symbol Definition
start with principio;
principio ::= INIT OPEN_LLAVE declaracion CLOSE_LLAVE programa {: System.out.println("Programa"); :};
declaracion ::= declaracion variableIniciada {: System.out.println("Declaracion de variable"); :};
declaracion ::= variableIniciada {: System.out.println("Declaracion de variable"); :};
variableIniciada ::= INT listaEnteros {: System.out.println("Entero");:};
variableIniciada ::= STRING listaCadena {: System.out.println("Cadena");:};
variableIniciada ::= FLOAT listaFlotante {: System.out.println("Flotante"); :};
listaEnteros ::= listaEnteros COMA IDENTIFIER:id {: System.out.println("Variable Entera: " + id ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"int","",""));:};
listaEnteros ::= IDENTIFIER:id  {: System.out.println("Variable Entera: " + id); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"int","",""));:};
listaFlotante ::= listaFlotante COMA IDENTIFIER:id {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"float","","")); :};
listaFlotante ::= IDENTIFIER:id  {: System.out.println("Variable Flotante: " + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"float","","")); :};
listaCadena ::= listaCadena COMA IDENTIFIER:id {: System.out.println("Cadena:" + id );new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"string","","")); :};
listaCadena ::= IDENTIFIER:id  {: System.out.println("Cadena:" + id);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo(id.toString(),"string","","")); :};
programa ::= programa sentence {: System.out.println("Programa Sentencia"); :};
programa ::= sentence {: System.out.println("Sentencia");:};
sentence ::= iteracion {:System.out.println("Sentencia");:};
sentence ::= seleccion {:System.out.println("Sentencia"); :};
sentence ::= assignment {:System.out.println("Sentencia");  :};
sentence ::= firstindexof{: System.out.println("Sentencia"); :};
sentence ::= timer {: System.out.println("Sentencia"); :};
sentence ::= read{: System.out.println("Sentencia"); :};
sentence ::= write{:System.out.println("Sentencia"); :};
iteracion ::= WHILE OPEN_BRACKET condicion CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("iteracion"); :};
seleccion ::= IF OPEN_BRACKET condicion CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("Seleccion simple"); :};
seleccion ::= IF OPEN_BRACKET condicion CLOSE_BRACKET OPEN_LLAVE programa CLOSE_LLAVE ELSE OPEN_LLAVE programa CLOSE_LLAVE {: System.out.println("Seleccion con else"); :};
condicion ::= comparacion {: System.out.println("Condicion"); :};
condicion ::= NOT comparacion {: System.out.println("Condicion negada"); :};
condicion ::= condicion OR comparacion {: System.out.println("OR"); :};
condicion ::= condicion AND comparacion {: System.out.println("AND"); :};
comparacion ::= expression comparador expression {: System.out.println("Comparacion"); :};
comparador ::= MAYOROIGUAL {: System.out.println(">="); :};
comparador ::= MAYOR {: System.out.println(">"); :};
comparador ::= IGUAL {: System.out.println("="); :};
comparador ::= MENOROIGUAL {: System.out.println("<="); :};
comparador ::= MENOR {: System.out.println("<"); :};
assignment ::= IDENTIFIER ASSIG expression {: System.out.println("Asignacion"); :};
expression ::= expression PLUS term {: System.out.println("+"); :};
expression ::= expression SUB term {: System.out.println("-"); :};
expression ::= term {: System.out.println("Expression = Term"); :};
term ::= term MULT factor {: System.out.println("*"); :};
term ::= term DIV factor {: System.out.println("/"); :};
term ::= factor {: System.out.println("Term = factor"); :};
factor ::= IDENTIFIER:id  {: System.out.println("Id: " + id); :};
factor ::= INTEGER_CONSTANT:constant {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),""));:};
factor ::= FLOAT_CONSTANT:constant {: System.out.println("Constant: " + constant ); new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_FLOAT",constant.toString(),""));:};
factor ::= OPEN_BRACKET expression CLOSE_BRACKET {: System.out.println("Factor = (Expression)"); :};
read ::= READ OPEN_BRACKET IDENTIFIER:id  CLOSE_BRACKET {: System.out.println("read(base) *-base es una variable-*");:};
write ::= WRITE OPEN_BRACKET IDENTIFIER:id CLOSE_BRACKET{: System.out.println(" *- var1 es una variable numÃ©rica definida previamente -*");:};
write ::= WRITE OPEN_BRACKET STRING_CONSTANT:constant CLOSE_BRACKET{: System.out.println( "Write(STRING) Constant: " + constant );  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_STRING",constant.toString(),constant.toString()));:};
timer ::= TIMER OPEN_BRACKET INTEGER_CONSTANT:constant COMA write CLOSE_BRACKET{: System.out.println("Timer: " + constant);new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),"")); :};
firstindexof ::= FIRSTINDEXOF OPEN_BRACKET IDENTIFIER:id PYC OPEN_CORCHETE lista CLOSE_CORCHETE CLOSE_BRACKET {: System.out.println("FirstIndexOf: Elemento a buscar" + id + "[Lista]");:};
lista::= lista COMA elemento{: System.out.println("Lista , elemento"); :};
lista::= elemento{: System.out.println("Elemento"); :};
elemento::=IDENTIFIER:id{: System.out.println("Identificador: " + id); :};
elemento::=INTEGER_CONSTANT:constant{: System.out.println("Entero: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_INT",constant.toString(),""));:};
elemento::=FLOAT_CONSTANT:constant{: System.out.println("Flotante: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_FLOAT",constant.toString(),""));:};
elemento::=STRING_CONSTANT:constant{: System.out.println("Cadena: " + constant);  new SymbolTableGenerator().getTablaSimbolos().add(new Simbolo("_"+constant.toString(),"CTE_STRING",constant.toString(),constant.toString())); :};
